Begin parsing... programs/factorialarray.cpp

Program (abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <j, int>, <f[6], int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 5
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: j
      IntValue: 0
    Assignment: 
      ArrayRef: f[0]
      IntValue: 1
    Assignment: 
      ArrayRef: f[1]
      IntValue: 1
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          Variable: j
          Variable: i
        Assignment: 
          Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
        Assignment: 
          ArrayRef: f[i]
          Binary: 
            Operator: *
            ArrayRef: f[j]
            Variable: i

Begin type checking...programs/factorialarray.cpp

Type map:
{ <f[6], int>, <n, int>, <j, int>, <i, int> }

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <j, int>, <f[6], int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 5
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: j
      IntValue: 0
    Assignment: 
      ArrayRef: f[0]
      IntValue: 1
    Assignment: 
      ArrayRef: f[1]
      IntValue: 1
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          Variable: j
          Variable: i
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
        Assignment: 
          ArrayRef: f[i]
          Binary: 
            Operator: INT*
            ArrayRef: f[j]
            Variable: i

Begin interpreting...programs/factorialarray.cpp

Final State
{ <f[6], [1, 1, 2, 6, 24, 120]>, <n, 5>, <j, 4>, <i, 5> }
